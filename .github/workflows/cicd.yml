# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:  
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildapi:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12, 15]

    # Pasos a ejecutar
    steps:
      # Hace pull del repo
      - uses: actions/checkout@v2
      # Instala y configura la versi√≥n de nodejs
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      # Ejecuta npm install
      - run: npm install
        working-directory: src/api
      # Ejecuta npm test
      - run: npm test
        working-directory: src/api
      - name: Docker build api
        uses: docker/build-push-action@v2
        with:
          build-args: |
            nv=${{ matrix.node-version }}
          context: src/api
          file: src/api/Dockerfile
          platforms: linux/amd64
          tags: eiximenis/s2020-api:${{ matrix.node-version }}-latest
          load: true
          push: false
      - name: Exports api image
        if: matrix.node-version == 15
        run: docker save -o api.tar eiximenis/s2020-api:15-latest
      - name: Upload api package
        uses: actions/upload-artifact@v2
        if:  matrix.node-version == 15
        with:
          name: apitar
          path: ./api.tar
  buildweb:
    runs-on: ubuntu-latest
    steps:
      # Hace pull del repo
      - uses: actions/checkout@v2
      - name: Docker build web
        uses: docker/build-push-action@v2
        with:
          context: src/BeersWeb
          file: src/BeersWeb/Dockerfile
          platforms: linux/amd64
          tags: eiximenis/s2020-web:latest
          load: true
          push: false
      - name: Exports  web image
        run: docker save -o web.tar eiximenis/s2020-web:latest
      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: webtar
          path: ./web.tar          
  
  pushapi:
    needs: buildapi
#    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download api package
        uses: actions/download-artifact@v2
        with:
          name: apitar
      - name: Imports api image
        run: docker load -i api.tar
      - name: Push image to repository
        uses: docker/build-push-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: eiximenis/s2020-api
          tag_with_ref: true
  pushweb:
    needs: buildweb
#    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download web package
        uses: actions/download-artifact@v2
        with:
          name: webtar
      - name: Imports api image
        run: docker load -i web.tar
      - name: Push image to repository
        uses: docker/build-push-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: eiximenis/s2020-web
          tag_with_ref: true
  publish:
    needs: [pushapi, pushweb]
    runs-on: ubuntu-latest
    steps:
    - name: deploy api
      uses: deliverybot/helm@v1
      with:
        chart: s2020-api
        namespace: s2020
      env:
        KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
